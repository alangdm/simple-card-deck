{"version":3,"sources":["src/index.js"],"names":["LitElement","html","css","classMap","sharedStyles","t","LANGUAGES","STATUS","NEW_GAME","LOADING","LOADED","PLAYING","ANIMATING","FINISHED","REPLAY","SimpleCardDeck","properties","fileUrls","attribute","status","_currentCard","styles","render","_headerText","_deckChange","_deckLoading","_canPlay","_deckAction","_actionText","card","next","animate","_nextCard","_transitionEnd","constructor","lang","navigator","language","substring","includes","document","documentElement","setAttribute","cardQueue","length","shadowRoot","querySelector","focus","_shuffle","shift","slice","sort","Math","random","e","target","customElements","define"],"mappings":"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","sourceRoot":"/source_map/","sourcesContent":["import { LitElement, html, css } from 'lit';\nimport { classMap } from 'lit/directives/class-map.js';\n\nimport { sharedStyles } from './shared-styles.js';\nimport './file-input.js';\nimport { t, LANGUAGES } from './texts.js';\n\nconst STATUS = {\n  NEW_GAME: 'newGame',\n  LOADING: 'loading',\n  LOADED: 'loaded',\n  PLAYING: 'playing',\n  ANIMATING: 'animating',\n  FINISHED: 'finished',\n  REPLAY: 'replay',\n};\n\nexport class SimpleCardDeck extends LitElement {\n  static get properties() {\n    return {\n      fileUrls: {\n        attribute: false,\n      },\n      status: {\n        attribute: false,\n      },\n      _currentCard: {\n        attribute: false,\n      },\n    };\n  }\n\n  static get styles() {\n    return [\n      sharedStyles,\n      css`\n        :host {\n          block-size: 100%;\n          display: grid;\n          grid-template-rows: auto 1fr auto;\n          place-items: center;\n          padding: 1rem;\n          grid-gap: 1rem;\n        }\n        main {\n          block-size: 100%;\n          display: grid;\n          grid-template-rows: auto 1fr;\n          justify-items: center;\n          grid-gap: 0.25rem;\n          overflow: hidden;\n        }\n        main > div {\n          display: grid;\n          justify-items: center;\n          grid-template-areas: 'card';\n          max-inline-size: 100%;\n          block-size: 100%;\n          overflow: hidden;\n        }\n        .card {\n          grid-area: card;\n          inline-size: 100%;\n          max-block-size: 100%;\n          object-fit: contain;\n          border-radius: 5%;\n        }\n        .next.card {\n          visibility: hidden;\n          transform: translateY(100%);\n          transition: transform 0.01s ease-in-out;\n        }\n        .next.card.animate {\n          visibility: visible;\n          transform: translateY(0);\n          transition-duration: 0.5s;\n        }\n        @media (max-width: 600px) {\n          main {\n            inline-size: 100%;\n          }\n        }\n        @media (prefers-reduced-motion: reduce) {\n          * {\n            transition-duration: 0.001s !important;\n          }\n        }\n      `,\n    ];\n  }\n\n  render() {\n    return html`\n      <header>\n        <details open>\n          <summary>${this._headerText}</summary>\n          <file-input @change=${this._deckChange} @input=${this._deckLoading}\n            >${t('inputLabel')}</file-input\n          >\n        </details>\n      </header>\n      <main>\n        <button\n          type=\"button\"\n          ?disabled=${!this._canPlay}\n          @click=${this._deckAction}\n        >\n          ${this._actionText}\n        </button>\n        <div>\n          ${this._currentCard\n            ? html` <img class=\"card\" src=\"${this._currentCard}\" /> `\n            : ''}\n          <img\n            class=\"${classMap({\n              card: true,\n              next: true,\n              animate: this._nextCard,\n            })}\"\n            src=\"${this._nextCard}\"\n            @transitionend=${this._transitionEnd}\n          />\n        </div>\n      </main>\n      <footer>\n        <a href=\"https://github.com/alangdm/simple-card-deck\">Github</a>\n      </footer>\n    `;\n  }\n\n  constructor() {\n    super();\n    this.fileUrls = [];\n    this.status = STATUS.NEW_GAME;\n\n    const lang = navigator.language.substring(0, 2);\n    if (LANGUAGES.includes(lang)) {\n      document.documentElement.setAttribute('lang', lang);\n    }\n  }\n\n  get _headerText() {\n    switch (this.status) {\n      case STATUS.NEW_GAME:\n        return t('beforeLoad');\n      case STATUS.LOADING:\n        return t('loading');\n      case STATUS.LOADED:\n        return t('afterLoad');\n      default:\n        return t('secondLoad');\n    }\n  }\n\n  get _actionText() {\n    return this.status === STATUS.FINISHED ? t('shuffle') : t('nextCard');\n  }\n\n  get _canPlay() {\n    return (\n      this.status !== STATUS.NEW_GAME &&\n      this.status !== STATUS.LOADING &&\n      this.status !== STATUS.ANIMATING\n    );\n  }\n\n  _transitionEnd() {\n    if (this.status === STATUS.ANIMATING) {\n      this._currentCard = this._nextCard;\n      this._nextCard = null;\n      if (this.cardQueue.length === 0) {\n        this.status = STATUS.FINISHED;\n      } else {\n        this.status = STATUS.PLAYING;\n      }\n    }\n    this.shadowRoot.querySelector('button').focus();\n  }\n\n  _deckAction() {\n    if (this.status === STATUS.FINISHED) {\n      this._shuffle();\n      this.status = STATUS.REPLAY;\n    } else if (this.cardQueue.length > 0) {\n      this.status = STATUS.ANIMATING;\n      this._nextCard = this.cardQueue.shift();\n    }\n  }\n\n  _shuffle() {\n    this._currentCard = null;\n    this._nextCard = null;\n    this.cardQueue = this.fileUrls.slice().sort(() => 0.5 - Math.random());\n  }\n\n  _deckChange(e) {\n    this.status = 'loaded';\n    this.fileUrls = e.target.fileUrls;\n    this._shuffle();\n  }\n\n  _deckLoading() {\n    this.status = 'loading';\n  }\n}\n\ncustomElements.define('simple-card-deck', SimpleCardDeck);\n"]}